0. Misc
* срок: три недели (первая неделя -- коллоквиум);
* в конце каждой недели проверяются все присланные решения (попытка сдачи).

1. Основное задание
Написать программу, которая вырезает из картинки заданную область, поворачивает
эту область по часовой стрелке на 90 градусов и сохраняет результат
в новом файле.

Формат картинок:
* входной и выходной файл в формате BMP;
* DIB формат - BITMAPINFOHEADER;
* беспалитровый;
* 24 бита на цвет;
* без сжатия;
* файл всегда соответствует формату (проверять не нужно);
* все поля стандартных BMP заголовков в выходном файле должны иметь те же
значения что и во входном (кроме тех, которые изменяются, например, размер);
* если необходимо выравнивание, дописывать следует нули;
* пиксель с координатой (0, 0) -- левый верхний на изображении.

Hints:
* обратите внимание на порядок записи пикселей.

1.1 Описание интерфейса

Программа получает параметры из командной строки и должна проверить
их корректность.

./main crop-rotate <in-bmp> <out-bmp> <x> <y> <w> <h>
Последние 4 параметра задают прямоугольную область, которую следует вырезать:
x y - левый верхний угол области (отсчет от точки 0, 0)
w h - ширина и высота области

Если программа получила некорректные параметры или есть проблемы
с чтением входного файла, выделением памяти и т.п.,
то программа возвращает операционной системе ненулевой код возврата
(return в main).

Рекомендуется реализовать несколько функций
(например, load_bmp, crop, rotate, save_bmp).

1.2 Требования к решению

* исходные тексты (минимум): main.c, bmp.c, bmp.h;
* Makefie (с целью clean);
* язык программирования - C;
* обязательные флаги при сборке (явно указать в Makefile):
   -std=c99, -Wall, -Werror;
* можно пользоваться только стандартной библиотекой языка C;
* решение сдается через svn (http://mit.spbau.ru/svn/cpp16b/);
* корректная работа с памятью (если программа завершается аварийно,
память можно не освобождать);
* можно хранить обрабатываемую картинку в памяти полностью.

2. Задание на дополнительные баллы

Eсли изменить младшиe биты (LSB) в некоторых цветовых компонентах (BGR у BMP)
у некоторых пикселей, то глаз наблюдателя не заметит изменений в картинке.
Этот эффект можно использовать для скрытного внедрения в картинку сообщений
(стеганографии).

Для внедрения и извлечения данных из картинки необходимо знать ключ,
который задает компоненты и пиксели, которые хранят биты сообщения.

Алгоритм работы следующий: биты символов сообщения внедряются в пиксели согласно ключу
(по одному биту сообщения на пиксель, младший бит символа внедряется первым).

Считаем, что сообщение состоит из прописных английских букв, пробела, точки, запятой
(26 + 3 = 29 символов -> 5 бит на символ, порядок кодирования указан выше).

2.1 Интерфейс

Встраивание сообщения:
./main insert <in-bmp> <out-bmp> <key-txt> <msg-txt>

Извлечение сообщения:
./main extract <in-bmp> <key-txt> <msg-txt>

in-bmp, out-bmp, key-txt, msg-txt -- имена файлов.

2.2 Формат ключа

Ключ задается текстовым файлом, каждая строка которого содержит 2 числа и
символ через пробелы (x y component), указывающие позицию для вставки
(например, 20 10 B --- x=20, y=10, цветовой компонент B). Компоненты: R, G, B.

Предполагается, что входное сообщение, картинка и ключ соответствуют друг другу,
т.е. позиций в ключе столько же, сколько символов в сообщении * 5,
а в картинке есть все пиксели, указанные в ключе.
